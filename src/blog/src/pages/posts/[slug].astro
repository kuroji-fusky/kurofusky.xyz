---
import Layout from "../../components/Layout.astro"
import { documentToHtmlString } from "@contentful/rich-text-html-renderer"
import { contentfulClient, type BlogPost } from "../../lib/contentful"
import type { Options } from "@contentful/rich-text-html-renderer"
import { BLOCKS, MARKS } from "@contentful/rich-text-types"
import readableDate from "../../lib/readableDate"

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost"
  })

  // This code is garbage, will be migrating to Sanity soon
  const options: Options = {
    renderNode: {
      [BLOCKS.PARAGRAPH]: (node) => {
        const _content = node.content

        // if (
        //   _content.nodeType == "hyperlink" &&
        //   _content.data.url.includes("youtube")
        // ) {
        //   return `<div>CUM</div>`
        // } else {
        return [
          `<p data-stuff="" >`,
          ..._content.map((lol) => (lol as any).value),
          `</p>`
        ].join("")
        // }
      },
      [BLOCKS.EMBEDDED_ASSET]: (node) => {
        const embeddedFields = node.data.target.fields

        return `<img
          src="https:${embeddedFields.file.url}?fm=webp&q=75"
          alt="${embeddedFields.title}"
          draggable="false"
          class="rounded-md"
          />`
      }
    }
  }

  return entries.items.map((item) => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      description: item.fields.description,
      banner: item.fields.banner.fields.file.url,
      content: documentToHtmlString(item.fields.content, options),
      date: item.fields.overridePublishDate
        ? item.fields.overridePublishDate
        : item.sys.createdAt
    }
  }))
}

const { title, description, banner, content, date } = Astro.props

const fullBanner = `https:${banner}?fm=webp&w=1280&h=720`
const blogThumbnail = `https:${banner}?fm=webp&q=66&fit=fill&w=1200&h=630`
---

<Layout
  title={`${title} | Kuroji Fusky Blog`}
  {description}
  image={blogThumbnail}
  isArticle
>
  <main
    class="max-w-screen-lg mx-auto"
    itemtype="http://schema.org/Blog"
    itemscope
  >
    <meta itemprop="thumbnailUrl" content={blogThumbnail} />
    <section class="flex flex-col gap-y-4 mt-5">
      <div class="flex gap-x-3">
        <div>tag stuff</div>
        <span>
          Published on
          <time datetime={date} itemprop="datePublished">
            {readableDate(date as unknown as Date)}
          </time>
        </span>
      </div>
      <h1 class="text-4xl font-inter font-bold leading-tight" itemprop="name">
        {title}
      </h1>
      <div itemprop="abstract" class="text-xl opacity-80">{description}</div>
      <img
        src={fullBanner}
        alt=""
        decoding="async"
        class="rounded-xl aspect-video object-cover"
        fetchpriority="high"
        draggable="false"
        itemprop="image"
      />
    </section>
    <section class="my-5 text-lg">
      <article
        set:html={content}
        class="prose-headings:my-3 prose-headings:font-bold prose-h2:text-3xl"
      />
    </section>
  </main>
</Layout>
