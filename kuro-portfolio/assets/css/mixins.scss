$_vw: var(--vw);

@mixin fallback-viewport($pixels, $mq: true) {
	$_computed: calc($pixels / 100);

	@if ($mq) {
		@media (min-width: #{$pixels}px) {
			--vw: #{$_computed}px;
		}
	} @else {
		--vw: #{$_computed}px;
	}
}

// Media queries
@mixin mq-lg {
	@media (min-width: 768px) {
		@content;
	}
}
@mixin mq-xl {
	@media (min-width: 1024px) {
		@content;
	}
}

// calc viewport width from something
@mixin calc-vw-responsive($property, $variable, $fallback) {
	@if ($fallback) {
		#{$property}: calc(#{$_vw} * var(--bui-#{$variable}, #{$fallback}));
	} @else {
		#{$property}: calc(#{$_vw} * var(--bui-#{$variable}));
	}
}

// shorthands to make my life easier
@mixin shorthands($property, $letter) {
	$fb-x-md: var(--bui-#{$letter}x-md, 0);
	$fb-y-md: var(--bui-#{$letter}y-md, 0);
	$fb-x-lg: var(--bui-#{$letter}x-lg, 0);
	$fb-y-lg: var(--bui-#{$letter}y-lg, 0);
	$fb-x-xl: var(--bui-#{$letter}x-xl, 0);
	$fb-y-xl: var(--bui-#{$letter}y-xl, 0);

	--#{$letter}t: var(--bui-#{$letter}t-md, #{$fb-y-md});
	--#{$letter}r: var(--bui-#{$letter}r-md, #{$fb-x-md});
	--#{$letter}b: var(--bui-#{$letter}b-md, #{$fb-y-md});
	--#{$letter}l: var(--bui-#{$letter}l-md, #{$fb-x-md});

	#{$property}: var(--#{$letter}t) var(--#{$letter}r) var(--#{$letter}b)
		var(--#{$letter}l);

	@include mq-lg {
		--#{$letter}t: calc(#{$_vw} * var(--bui-#{$letter}t-lg, #{$fb-y-lg}));
		--#{$letter}r: calc(#{$_vw} * var(--bui-#{$letter}r-lg, #{$fb-x-lg}));
		--#{$letter}b: calc(#{$_vw} * var(--bui-#{$letter}b-lg, #{$fb-y-lg}));
		--#{$letter}l: calc(#{$_vw} * var(--bui-#{$letter}l-lg, #{$fb-x-lg}));
	}

	@include mq-xl {
		--#{$letter}t: calc(#{$_vw} * var(--bui-#{$letter}t-xl, #{$fb-y-xl}));
		--#{$letter}r: calc(#{$_vw} * var(--bui-#{$letter}r-xl, #{$fb-x-xl}));
		--#{$letter}b: calc(#{$_vw} * var(--bui-#{$letter}b-xl, #{$fb-y-xl}));
		--#{$letter}l: calc(#{$_vw} * var(--bui-#{$letter}l-xl, #{$fb-x-xl}));
	}
}
@mixin gap-shorthands {
	--row: var(--bui-gap-y-md, var(--bui-gap-md, 0));
	--column: var(--bui-gap-x-md, var(--bui-gap-md, 0));
	gap: var(--row) var(--column);

	@include mq-lg {
		--row: calc(#{$_vw} * var(--bui-gap-y-lg, var(--bui-gap-lg, 0)));
		--column: calc(#{$_vw} * var(--bui-gap-x-lg, var(--bui-gap-lg, 0)));
	}

	@include mq-xl {
		--row: calc(#{$_vw} * var(--bui-gap-y-xl, var(--bui-gap-xl, 0)));
		--column: calc(#{$_vw} * var(--bui-gap-x-xl, var(--bui-gap-xl, 0)));
	}
}

@mixin size-shorthands {
	$fallback-variable: var(--bui-fixed-size);

	width: var(--bui-width, $fallback-variable);
	height: var(--bui-height, $fallback-variable);

	@include mq-lg {
		@include calc-vw-responsive("width", "width-lg", $fallback-variable);
		@include calc-vw-responsive("height", "height-lg", $fallback-variable);
	}

	@include mq-xl {
		@include calc-vw-responsive("width", "width-xl", $fallback-variable);
		@include calc-vw-responsive("height", "height-xl", $fallback-variable);
	}
}

@mixin prose-packer($is-prose, $prose-type) {
	@if $is-prose {
		@if $prose-type == sub-p {
			@apply prose-p:text-[calc(var(--mobile-#{$prose-type}))] 
        md:prose-p:text-[calc(var(--vw)*var(--desktop-lg-#{$prose-type}))]
        lg:prose-p:text-[calc(var(--vw)*var(--desktop-xl-#{$prose-type}))];
		} @else {
			@apply prose-#{$prose-type}:text-[calc(var(--mobile-#{$prose-type}))] 
        md:prose-#{$prose-type}:text-[calc(var(--vw)*var(--desktop-lg-#{$prose-type}))]
        lg:prose-#{$prose-type}:text-[calc(var(--vw)*var(--desktop-xl-#{$prose-type}))];
		}
	} @else {
		@apply text-[calc(var(--mobile-#{$prose-type}))] 
        md:text-[calc(var(--vw)*var(--desktop-lg-#{$prose-type}))]
        lg:text-[calc(var(--vw)*var(--desktop-xl-#{$prose-type}))];
	}
}

@mixin tw-rs-packed($prose: false) {
	$article-tags: (h1, h2, h3, p, sub-p);
	@each $tag in $article-tags {
		&-#{$tag} {
			@include prose-packer($prose, #{$tag});
		}
	}
}
